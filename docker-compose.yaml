version: '3.4'

services:

  redis:
    container_name: redis
    hostname: redis
    image: redis:latest
    networks:
      - main
    restart: on-failure

  postgres:
    container_name: postgres
    hostname: postgres
    image: postgres:latest
    environment:
      - POSTGRES_USER=feedio
      - POSTGRES_PASSWORD=feediopass
      - POSTGRES_DB=feediodb
    networks:
      - main
    restart: on-failure
    volumes:
      - postgresql-data:/var/lib/postgresql/data

  app:
    build: .
    command: sh -c "python manage.py collectstatic --no-input && python manage.py migrate && gunicorn feedio.wsgi -b 0.0.0.0:8000"
    container_name: app
    environment:
      - SECRET_KEY=supersecretkey
      - DJANGO_SETTINGS_MODULE=feedio.settings.production
    depends_on:
      - postgres
      - redis
    ports:
      - "8000:8000"
    hostname: app
    image: app-image
    networks:
      - main
    restart: on-failure

  celery_worker:
    command: sh -c "celery -A feedio worker -l info --statedb=./celery/worker.state"
    container_name: celery_worker
    depends_on:
      - app
      - postgres
      - redis
    environment:
      - SECRET_KEY=supersecretkey
      - DJANGO_SETTINGS_MODULE=feedio.settings.production
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
    hostname: celery_worker
    image: app-image
    networks:
      - main
    restart: on-failure

  celery_beat:
    command: sh -c "celery -A feedio worker -B -s ./celery/celerybeat-schedule -n celeary_beat"
    container_name: celery_beat
    depends_on:
      - app
      - postgres
      - redis
      - celery_worker
    environment:
      - SECRET_KEY=supersecretkey
      - DJANGO_SETTINGS_MODULE=feedio.settings.production
    hostname: celery_beat
    image: app-image
    networks:
      - main
    restart: on-failure

networks:
  main:

volumes:
  postgresql-data:
